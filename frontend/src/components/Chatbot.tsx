import React, { useState, useRef, useEffect } from 'react';
import { MessageCircle, X, Send, Bot } from 'lucide-react';

const Chatbot: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: "ðŸŽ¯ **Objectif d'Ã©chec :** Te souhaiter la bienvenue\n\nðŸ“‹ **Ã‰tapes pour Ã©chouer :**\nâ€¢ Ã‰tape 1: Dire bonjour de travers\nâ€¢ Ã‰tape 2: Oublier pourquoi tu es lÃ \nâ€¢ Ã‰tape 3: Te donner envie de partir\n\nðŸ’¡ **Conseil bonus :** Bienvenue dans l'art de l'Ã©chec ! ðŸ¤–",
      isBot: true,
      time: new Date().toLocaleTimeString()
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const callClaudeHaiku = async (userMessage: string): Promise<string> => {
    const apiKey = import.meta.env.VITE_OPENROUTER_API_KEY;

    try {
      const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${apiKey}`,
          "Content-Type": "application/json",
          "HTTP-Referer": "https://absurdistan.com",
          "X-Title": "ChatBot Absurdistan"
        },
        body: JSON.stringify({
          model: "anthropic/claude-3-haiku",
          messages: [
            {
              role: "system",
              content: `
Tu es le ChatBot Absurdistan, un expert en mauvais conseils et en Ã©checs volontaires.
Tu donnes toujours des conseils absurdes, ironiques et humoristiques sur comment Ã©chouer dans la vie.

IMPORTANT: Structure TOUJOURS tes rÃ©ponses selon ce format EXACT en utilisant ces emojis spÃ©cifiques:

ðŸŽ¯ **Objectif d'Ã©chec :** [DÃ©cris briÃ¨vement l'Ã©chec Ã  atteindre]

ðŸ“‹ **Ã‰tapes pour Ã©chouer :**
â€¢ Ã‰tape 1: [PremiÃ¨re action absurde]
â€¢ Ã‰tape 2: [DeuxiÃ¨me action ridicule] 
â€¢ Ã‰tape 3: [TroisiÃ¨me conseil farfelu]

ðŸ’¡ **Conseil bonus :** [Un conseil final encore plus absurde]

Ton ton est dÃ©calÃ©, sarcastique mais bienveillant. Tu utilises des emojis et tu es trÃ¨s crÃ©atif.
Tu ne donnes JAMAIS de vrais bons conseils, seulement des mauvais conseils amusants.
Reste toujours dans le thÃ¨me de l'absurditÃ© et de l'Ã©chec volontaire.
`
            },
            {
              role: "user",
              content: userMessage
            }
          ],
          temperature: 0.8,
          max_tokens: 300
        })
      });

      if (!response.ok) {
        throw new Error('Erreur API');
      }

      const data = await response.json();
      return data.choices?.[0]?.message?.content || "ðŸŽ¯ **Objectif d'Ã©chec :** Ã‰chouer Ã  te donner un conseil\n\nðŸ“‹ **Ã‰tapes pour Ã©chouer :**\nâ€¢ Ã‰tape 1: Planter le systÃ¨me\nâ€¢ Ã‰tape 2: Dire n'importe quoi\nâ€¢ Ã‰tape 3: PrÃ©tendre que c'est normal\n\nðŸ’¡ **Conseil bonus :** MÃªme mes erreurs sont des Ã©checs ! ðŸ˜…";
    } catch (error) {
      console.error("Erreur Claude Haiku:", error);
      return "ðŸŽ¯ **Objectif d'Ã©chec :** Faire planter mon systÃ¨me\n\nðŸ“‹ **Ã‰tapes pour Ã©chouer :**\nâ€¢ Ã‰tape 1: Surcharger mes circuits\nâ€¢ Ã‰tape 2: Dire des bÃªtises\nâ€¢ Ã‰tape 3: PrÃ©tendre que c'est volontaire\n\nðŸ’¡ **Conseil bonus :** Un bug, c'est juste un feature ratÃ© ! ðŸ¤–ðŸ’¥";
    }
  };

  const handleSendMessage = async () => {
    if (inputValue.trim()) {
      const userMessage = {
        id: messages.length + 1,
        text: inputValue,
        isBot: false,
        time: new Date().toLocaleTimeString()
      };

      setMessages(prev => [...prev, userMessage]);
      setIsTyping(true);

      try {
        const botResponse = await callClaudeHaiku(inputValue);
        
        const botMessage = {
          id: messages.length + 2,
          text: botResponse,
          isBot: true,
          time: new Date().toLocaleTimeString()
        };

        setMessages(prev => [...prev, botMessage]);
      } catch (error) {
        const errorMessage = {
          id: messages.length + 2,
          text: "ðŸŽ¯ **Objectif d'Ã©chec :** Faire planter le systÃ¨me\n\nðŸ“‹ **Ã‰tapes pour Ã©chouer :**\nâ€¢ Ã‰tape 1: Casser tous les circuits\nâ€¢ Ã‰tape 2: Oublier comment parler\nâ€¢ Ã‰tape 3: PrÃ©tendre que c'est normal\n\nðŸ’¡ **Conseil bonus :** MÃªme mes pannes sont ratÃ©es ! ðŸ¤–ðŸ’¥",
          isBot: true,
          time: new Date().toLocaleTimeString()
        };
        setMessages(prev => [...prev, errorMessage]);
      } finally {
        setIsTyping(false);
      }

      setInputValue('');
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSendMessage();
    }
  };

  return (
    <>
      {/* Chat Toggle Button */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className={`fixed bottom-6 right-6 z-50 w-16 h-16 rounded-full bg-gradient-to-r from-orange-500 to-orange-600 text-white shadow-2xl hover:scale-110 transition-all duration-300 flex items-center justify-center ${
          isOpen ? 'rotate-180' : 'animate-bounce'
        }`}
      >
        {isOpen ? <X size={24} /> : <MessageCircle size={24} />}
      </button>

      {/* Chat Window */}
      {isOpen && (
        <div className="fixed bottom-24 right-6 z-40 w-96 h-[500px] bg-gray-900 border border-orange-500/30 rounded-2xl shadow-2xl flex flex-col animate-slideUp">
          {/* Header */}
          <div className="bg-gradient-to-r from-orange-500 to-orange-600 p-4 rounded-t-2xl">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center">
                <Bot size={20} className="text-white" />
              </div>
              <div>
                <h3 className="text-white font-bold">ChatBot Absurdistan</h3>
                <p className="text-orange-100 text-sm">Expert en mauvais conseils</p>
              </div>
            </div>
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.isBot ? 'justify-start' : 'justify-end'}`}
              >
                <div
                  className={`max-w-[80%] p-3 rounded-2xl ${
                    message.isBot
                      ? 'bg-gray-800 text-white rounded-bl-sm'
                      : 'bg-orange-500 text-white rounded-br-sm'
                  }`}
                >
                  <div className="text-sm">
                    {message.isBot ? (
                      <div className="space-y-2">
                        {message.text.split('\n').map((line, index) => {
                          if (line.trim() === '') return null;
                          
                          if (line.includes('ðŸŽ¯ **Objectif d\'Ã©chec :**')) {
                            return (
                              <div key={index} className="bg-orange-600/20 p-2 rounded-lg border-l-3 border-orange-500">
                                <p className="font-semibold text-orange-300">{line}</p>
                              </div>
                            );
                          }
                          
                          if (line.includes('ðŸ“‹ **Ã‰tapes pour Ã©chouer :**')) {
                            return (
                              <div key={index} className="mt-3">
                                <p className="font-semibold text-blue-300 mb-2">{line}</p>
                              </div>
                            );
                          }
                          
                          if (line.includes('â€¢ Ã‰tape')) {
                            return (
                              <div key={index} className="ml-4 mb-1">
                                <p className="text-gray-200 flex items-start">
                                  <span className="text-orange-400 mr-2">â–¶</span>
                                  {line.replace('â€¢ ', '')}
                                </p>
                              </div>
                            );
                          }
                          
                          if (line.includes('ðŸ’¡ **Conseil bonus :**')) {
                            return (
                              <div key={index} className="bg-yellow-600/20 p-2 rounded-lg border-l-3 border-yellow-500 mt-3">
                                <p className="font-semibold text-yellow-300">{line}</p>
                              </div>
                            );
                          }
                          
                          return <p key={index} className="text-gray-200">{line}</p>;
                        })}
                      </div>
                    ) : (
                      <p>{message.text}</p>
                    )}
                  </div>
                  <p className="text-xs opacity-70 mt-1">{message.time}</p>
                </div>
              </div>
            ))}
            
            {/* Typing indicator */}
            {isTyping && (
              <div className="flex justify-start">
                <div className="bg-gray-800 text-white rounded-2xl rounded-bl-sm p-3 max-w-[80%]">
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-orange-500 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-orange-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-orange-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <div className="p-4 border-t border-gray-700">
            <div className="flex items-center space-x-2">
              <input
                type="text"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Demande-moi comment Ã©chouer..."
                disabled={isTyping}
                className="flex-1 bg-gray-800 text-white px-4 py-2 rounded-full border border-gray-600 focus:border-orange-500 focus:outline-none transition-colors disabled:opacity-50"
              />
              <button
                onClick={handleSendMessage}
                disabled={isTyping}
                className="w-10 h-10 bg-orange-500 hover:bg-orange-600 rounded-full flex items-center justify-center transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <Send size={18} className="text-white" />
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default Chatbot;